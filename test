#!/usr/bin/env coffee
MagicString = require 'magic-string'
{decode} = require 'sourcemap-codec'
stringy = require 'stringy'
chalk = require 'chalk'

sorcery = require '.'

tests = []
passed = 0
skipped = 0

xaddTest = -> skipped += 1
addTest = (name, setup) ->
  tests.push test =
    name: name
    file: 'test.js'
    chain: []

  # setup test on the next tick
  process.nextTick ->
    test.step = step
    test.assert = assert
    test.expected = setup.call test

addTest 'insert line at start of file', ->
  @code = 'x;\ny;'

  # note: MagicString doesn't produce segments for inserted code 😢
  @step ms(@code).appendLeft(1, 'y').appendLeft(3, 'x')
  @step ms(@code).appendLeft(0, '\n')

  @assert '\nxy;\nxy;'
  [[]
   [[0, 0, 0, 0]
    [2, 0, 0, 1]]
   [[1, 0, 1, 0]]]

addTest 'remove first line', ->
  @code = '\nx;\ny;'

  @step ms(@code).overwrite(1, 2, 'xy').overwrite(4, 5, 'xy')
  @step ms(@code).remove(0, 1)

  @assert 'xy;\nxy;'
  [[[0, 0, 1, 0]
    [2, 0, 1, 1]]
   [[0, 0, 2, 0]
    [2, 0, 2, 1]]]

addTest 'insert line at middle of file', ->
  @code = 'x;\ny;'

  @step ms(@code).overwrite(0, 1, 'xy').overwrite(3, 4, 'xy')
  @step ms(@code).appendLeft(4, '\n')

  @assert 'xy;\n\nxy;'
  [[[0, 0, 0, 0]
    [2, 0, 0, 1]]
   []
   [[0, 0, 1, 0]
    [2, 0, 1, 1]]]

addTest 'break line in two', ->
  @code = 'x;y;'

  @step ms(@code).overwrite(0, 1, 'xy').overwrite(2, 3, 'xy')
  @step ms(@code).appendLeft(3, '\n\n')

  @assert 'xy;\n\nxy;'
  [[[0, 0, 0, 0]
    [2, 0, 0, 1]]
   []
   [[0, 0, 0, 2]
    [2, 0, 0, 3]]]

addTest 'break line in two (while removing characters)', ->
  @code = 'abcdef;'

  @step ms(@code).overwrite(0, 2, 'ba').overwrite(4, 6, 'fe')
  @step ms(@code).overwrite(2, 4, ';\n')

  @assert 'ba;\nfe;'
  [[[0, 0, 0, 0]
    [2, 0, 0, 2]]
   [[0, 0, 0, 4]
    [2, 0, 0, 6]]]

addTest 'indent lines', ->
  @code = 'x;\ny;'

  @step ms(@code).overwrite(0, 1, 'xx').overwrite(3, 4, 'xy')
  @step ms(@code).indent '  '

  @assert '  xx;\n  xy;'
  [[[2, 0, 0, 0]
    [4, 0, 0, 1]]
   [[2, 0, 1, 0]
    [4, 0, 1, 1]]]

addTest 'dedent lines', ->
  @code = '  x;\n  y;'

  @step ms(@code).overwrite(2, 3, 'xx').overwrite(7, 8, 'xy')
  @step ms(@code).remove(0, 2).remove(6, 8)

  @assert 'xx;\nxy;'
  [[[0, 0, 0, 2]
    [2, 0, 0, 3]]
   [[0, 0, 1, 2]
    [2, 0, 1, 3]]]

addTest 'remove line breaks', ->
  @code = 'x;\ny;\nz;'

  # rename the variables
  @step ms(@code).overwrite(0, 1, 'xx').overwrite(3, 4, 'yy').overwrite(6, 7, 'zz')

  # remove newlines
  @step do =>
    i = -1
    code = ms(@code)
    while -1 isnt i = @code.indexOf '\n', i + 1
      code.remove(i, i + 1)
    code

  @assert 'xx;yy;zz;'
  [[[0, 0, 0, 0]
    [2, 0, 0, 1]
    [3, 0, 1, 0]
    [5, 0, 1, 1]
    [6, 0, 2, 0]
    [8, 0, 2, 1]]]

# run the tests
process.nextTick ->

  debugChain = (chain) ->
    chain.forEach (node) ->
      console.log chalk.grey stringy
        content: node.content
        mappings: node.map and decode(node.map.mappings) or null
    console.log ''

  console.log ''
  tests.forEach (test) ->
    expected = test.expected
    len = expected.length

    if test.debug
      global.DEBUG = true

    actual = decode sorcery(test.chain).mappings

    if test.debug
      delete global.DEBUG

    if actual.length isnt len
      console.log chalk.red('error:'), test.name
      console.log "  Expected #{chalk.yellow len} line mappings, got #{chalk.red actual.length}"
      console.log ''
      console.log '  expected:', pretty expected, '  '
      console.log '    actual:', pretty actual, '  '
      console.log ''
      debugChain test.chain
      return

    for i in [0 ... len]
      len = expected[i].length
      if actual[i].length isnt len
        console.log chalk.red('error:'), test.name
        console.log "  Expected #{chalk.yellow len} segments, got #{chalk.red actual[i].length}"
        console.log ''
        console.log '      line:', pretty i, '  '
        console.log '  expected:', pretty expected[i], '  '
        console.log '    actual:', pretty actual[i], '  '
        console.log ''
        debugChain test.chain
        return

      for col in [0 ... len]
        if !equals expected[i][col], actual[i][col]
          console.log chalk.red('error:'), test.name
          console.log '  Invalid segment at', chalk.yellow(i + ':' + col)
          console.log ''
          console.log '  expected:', pretty expected[i][col], '  '
          console.log '    actual:', pretty actual[i][col], '  '
          console.log ''
          debugChain test.chain
          return

    passed += 1
    return

  if skipped
    console.log chalk.yellow "⚠️  Skipped #{skipped} tests\n"

  if passed is tests.length
    console.log chalk.green 'No errors\n'
    return

#
# Helpers
#

ms = (str) -> new MagicString str, hires: true

step = (ms) ->
  # Add the original source.
  if @chain.length is 0
    @chain.push file: @file, content: @code

  # Add the transformed source.
  @code = ms.toString()
  @chain.unshift
    content: @code
    map: ms.generateMap
      source: @file

assert = (code) ->
  if @code isnt code
    console.log chalk.red('error:'), @name
    console.log '  Invalid output string'
    console.log ''
    console.log '  expected:', pretty code, '  '
    console.log '    actual:', pretty @code, '  '
    console.log ''
    process.exit 1

equals = (a, b) ->
  return false if a.length isnt b.length
  for i in [0 ... a.length]
    return false if a[i] isnt b[i]
  return true

pretty = do ->
  format = require('util').inspect
  return (val, indent) ->
    str = format val, colors: true
    if indent then str.replace /\n/g, '\n' + indent
    else str
